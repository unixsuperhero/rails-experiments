<!--
= content_for :title
	Preface: Craftsmanship
-->

<h3 style="text-align:center;">Preface
</h3>
First of all, I would like to make note of why this post is labeled: "Preface".  In Book Design, the Preface is a part of "Front matter".  It often tells a story about the book, setting the tone.  That being said, I hope there are other developers out there who strive to be masters of their craft, and these logs help along the way.

Master Craftsman: A Developer’s Aspiration

[ Intro ]
Programming is my craft. The same way carpentry is for wood
workers. I eat, sleep, and breathe software. When I see
software someone else made, I wonder how it works. I
critique it. Whether it is your own work, or someone else's,
I believe these two actions are what make a good craftsman.

[ Tools ]
Craftsmen use tools. It is important to know your tools.
Which tasks a tool is best suited for. When to use a tool,
and when not to. Someone who is truely skilled, uses their
tools as an extention of themselves. Like a samurai and his
sword.
The main tools that I use are:
- unix shell
- vim
- a web browser
For years I have studied bash and vim, all while using a web
browser. Countless hours have been spent reading man pages
and the vim help docs, and rewriting the information in my own
words. These are two of the most powerful resources available
to you. Unlike the internet, these resources are usually free
from the public's opinion. However, of course, the internet
is still another powerful source of information.

[ Humility ]
It is important to accept when you are wrong. Understanding
why and learning from the experience is one of the quickest
ways to learn. The feeling of humiliation has a profound
effect on what information stands out in your memory. It may
sting at first, but the quicker you can get past it, the
better off you will be.

[ Practice ]
A master is someone who never stops practicing. Everything
produced provides another learning experience. The subtle
difference in the angle of a blade, and the effect it had on a
block on wood. Aspect that seem insignificant, like the
amount of pressure applied when kneading dough, are all
variables that can affect the outcome.

[ Trying different things ]
What goes hand-in-hand with practice, is trying new things.
Not being afraid to try something new, is an important
quality. If it fails, chances are, you won't die. Whether it
fails or succeeds, I'm sure you will have learned something
new. Be it, something never to do again, a great technique
that works, or maybe it leads to more questions and more
things to try. Everything contributes to your success.

[ trash ]
Craftwork is something you do by hand, as a human. We are
collections of information. It is important to understand
that other programmers know things that you do not. To
meet another developer is an opportunity to ask him/her
questions, and pick her brain.

<h3>Master Craftsman: A Developer's Aspiration
</h3>

<strong>Outline
</strong>

<ul>
	
<li>Know your tools, and know them well. so much, that you can use them in unconventional ways. (eg. A chef and ingredients.)
</li>
	
<li>Keep useful parts, ignore/forget useless parts. This might lead you to think, forget everything that doesn't work. But, some broken things are worth remembering. Which is why some people document anti-patterns. It helps to avoid methods that are known to break or lead to dead-ends. (Usefulness doesn't necessarily mean good. Some bugs and issues are useful to remember.) (this may be an obvious point, aka useless, so discard it)
</li>
	
<li>Know your own habits and limitations. (Muscle memory, maybe.) By knowing what you are prone to do, you can change your workflow to accomodate habits and leverage them.
</li>
	
<li>One who is not afraid to be wrong.  Basically, everyone makes mistakes or poor design decisions.  Those who understand this, and take constructive criticism well, are more likely to grow.  I'm always looking for a better way.  If I see someone do something I haven't seen before; or something cooler/faster than the way I would do it, I'm quick to ask how or why.
</li>
	
<li>using your time wisely. Don't get stuck on newb issues. I had a better idea of what this meant earlier.
</li>
	
<li>practice. For me, this (vaguely) goes hand-in-hand with fear of failure. If I can avoid it, I don't like to look bad in front of people. That sounds worse than it is. Rather, if I can help it, I like to appear skilled in front if people. And this has always driven me to practice in my own time. I was trying to think of how we could practice programming. Because, it's not fun to practice drilling, nor practical, coming up with all sorts of ideas. Then I realized that debugging is practice. A very good form of practice. It helps concepts stick because you figure them out for yourself.
</li>

</ul>
<!--
-#
  <wp:post_id>11</wp:post_id>
  <wp:post_date>2012-10-04 17:54:49</wp:post_date>
  <wp:post_date_gmt>2012-10-04 17:54:49</wp:post_date_gmt>
  <wp:post_name>preface-craftsmanship</wp:post_name>
  <wp:status>private</wp:status>
  <wp:post_type>post</wp:post_type>
  <wp:post_password></wp:post_password>
  <TAGS>
  Uncategorized
  </TAGS>
  <link>http://unixsuperhero.com/2012/10/04/preface-craftsmanship/</link>
  <pubDate>Thu, 04 Oct 2012 17:54:49 +0000</pubDate>
  <guid isPermaLink="false">http://unixsuperhero.wordpress.com/?p=11</guid>
-->
