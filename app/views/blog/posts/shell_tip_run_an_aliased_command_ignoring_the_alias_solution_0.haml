<!--
= content_for :title
	Shell Tip: Run an aliased command, ignoring the alias (Solution #0)
-->

<h4>How Bash Uses Aliases/Commands
</h4>
First, it will try to find an alias for the given name.  If no alias is found, then it will use the first command in your $PATH by the given name.

<h3>Scenario
</h3>
You set default options for 
<strong>cmd-x
</strong> by creating an alias with the same name (
<strong>cmd-x
</strong>).  In this example, the alias and command are both called "grep".

<pre>$&gt; alias grep="grep --color"
</pre>

<strong>BUT!
</strong>  What if you want to run grep 
<strong>without
</strong> the "--color" option?

<h3>Solution #0: Escape a letter in the command name with "\"
</h3>

<pre>$&gt; \grep #...
</pre>
This successfully completes our goal.  The shell does not use the alias, because "\grep" does not match any of our alias names.

It is still able to find grep in our $PATH, because escaping a character tells the shell to use the character literally.  In other words, "\g" is the same thing as "g". (for proof see: 
<strong>How Bash Treats Escaped Letters
</strong>)

<h3>How Bash Treats Escaped Letters
</h3>
Here is proof that bash will treat "\grep" and "grep" the same.

<pre>   # OPTIONS FOR diff:
   # -q only tell us if the files are different, not all of the differences
   # -s tell us if the files are identical
   #    (by default, diff only tells the differences between files
   #     and silently ignores files that are the same)

$&gt; diff -sq &lt;(echo grep) &lt;(echo \g\r\e\p)
Files /dev/fd/63 and /dev/fd/62 are identical

$&gt; diff -sq &lt;(echo grep) &lt;(echo notgrep)
Files /dev/fd/63 and /dev/fd/62 differ

   # See for yourself:
$&gt; echo grep
$&gt; echo \grep
$&gt; echo \g\r\e\p  # just to really emphasize that there is no difference
</pre>
Basically, the slash has no effect besides fooling the alias matcher.
<!--
-#
  <wp:post_id>92</wp:post_id>
  <wp:post_date>2012-11-21 05:11:55</wp:post_date>
  <wp:post_date_gmt>2012-11-21 05:11:55</wp:post_date_gmt>
  <wp:post_name>shell-tip-run-an-aliased-command-ignoring-the-alias-solution-0</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_type>post</wp:post_type>
  <wp:post_password></wp:post_password>
  <TAGS>
  alias
  aliases
  Bash
  bash tips
  cli
  command line
  Shell
  shell
  terminal
  unalias
  unix
  </TAGS>
  <link>http://unixsuperhero.com/2012/11/21/shell-tip-run-an-aliased-command-ignoring-the-alias-solution-0/</link>
  <pubDate>Wed, 21 Nov 2012 05:11:55 +0000</pubDate>
  <guid isPermaLink="false">http://unixsuperhero.com/?p=92</guid>
-->
