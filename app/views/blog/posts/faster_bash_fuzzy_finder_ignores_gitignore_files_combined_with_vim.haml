<!--
= content_for :title
	Faster Bash Fuzzy Finder; Ignores .gitignore Files; Combined with vim
-->
I use grep a lot and at work we have a large code base, many different apps.  Grep's switches to exclude files from the search aren't exactly quick to type.

The files I normally want to exclude from my greps, I normally don't want in my git repo anyway: logs, dumps, etc.  In other words, files that are in my .gitignore.

That's where git grep comes in.  It automatically ignores anything in your .gitignore.

This being said, instead of doing a $(find . -type f) everytime we want to fuzzy-find.  We can use git grep to list every file:


<pre>git grep -l '.' -- '*'
</pre>


<ul>

<li>'.' will match any file that has even a single character in it.  without this the &lt;filespec&gt; won't work.  You can even leave empty quotes: '', this will still cause the &lt;filespec&gt; to behave the way we want it to.
</li>

<li>-l lists the filename only
</li>

<li>-- '*' searches in every file tracked by the repo
</li>

</ul>

This will let us change ff() from:

<pre>
ff() {
  find . -type f | grep -i "$(echo "$1" | sed 's/./&amp;.*/g')"
}

</pre>

To:


<pre>
ff() {
  git grep -l '.' -- '*' | grep -i "$(echo "$1" | sed 's/./&amp;.*/g')"
}

</pre>

Not only that, the &lt;filespec&gt; argument matches against the (relative) path of the file.  Grep's file matching, on the other hand, only matches against the filename itself.

This will let us take the new ff() and make it even smaller:


<pre>
ff() {
  git grep -l '' -- "$(echo "$1" | sed 's/./&amp;*/g')"
}

</pre>

Now, our bash fuzzy-finder is:

<ul>
<li>faster
</li>
<li>restricted to only relevant files
</li>
</ul>


<h3>Bonus: Combine it with vim:
</h3>

<pre>
vff() {
  vim $(ff $1)
}

</pre>
<!--
-#
  <wp:post_id>185</wp:post_id>
  <wp:post_date>2013-01-24 14:46:52</wp:post_date>
  <wp:post_date_gmt>2013-01-24 14:46:52</wp:post_date_gmt>
  <wp:post_name>faster-bash-fuzzy-finder-ignores-gitignore-files-combined-with-vim</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_type>post</wp:post_type>
  <wp:post_password></wp:post_password>
  <TAGS>
  Bash
  bash
  bash tips
  bash tricks
  fuzzy finder
  Git
  grep
  Shell
  shell
  Vim
  vim
  </TAGS>
  <link>http://unixsuperhero.com/2013/01/24/faster-bash-fuzzy-finder-ignores-gitignore-files-combined-with-vim/</link>
  <pubDate>Thu, 24 Jan 2013 14:46:52 +0000</pubDate>
  <guid isPermaLink="false">http://unixsuperhero.com/?p=185</guid>
-->
