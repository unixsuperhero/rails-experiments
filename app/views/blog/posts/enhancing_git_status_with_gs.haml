= content_for :title
	Enhancing git status with gs
<h2><strong>Update: 2012-10-19</strong></h2>
I never intended for this command to be useful by itself.  It becomes useful when combined with other commands.  It's not about making git status searchable, but cleaning the output to make it reusable.  The search filtering feature is simply an added bonus.  p.s. The techniques used with this command are also useful with <a href="http://unixsuperhero.wordpress.com/2012/10/05/fuzzy-finder-in-the-style-of-bash/">ff()</a>.
<h2>TL;DR</h2>
<code>gs</code> is a bash function that lists/searches the files that are currently modified in your git repository. You can take that list, and use it with other commands to do some useful things. Watch the screencast I made, demonstrating how to use <code>gs</code>.

[youtube=http://www.youtube.com/watch?v=_fFzgnyYYD4]
<h3>Search is Everything</h3>
Imagine this scenario. I have a project that is being tracked under git. For the last 2 hours I have been editing files and making all sorts of changes. When I run git status, it isn't enough to just list the files that have changed. What if I want to reopen all the views that I have been working on? Am I supposed to copy each filename (using <span style="text-decoration:underline;">tmux</span>, <strong>not</strong> the mouse!) and piece together the vim command? That sounds like a horrible, tedious process. Why isn't there an easy way to get only a list of the views, and pass them as arguments to vim? This is the type of scenario where <code>gs</code> pays off. With <code>gs</code>, you can search for all the modified files in the views directory, and with command substitution or pipes, open them with vim.

Without search, your <code>git status</code> is just a report. With search, your <code>git status</code> is now a <strong>tool</strong>. This tool, <code>gs</code>, lets you quickly target only the files relevant to your current task.
<h3>gs is an enhanced git status</h3>
<code>gs</code> is a bash function that lists/searches the files that are modified in your git repository. For example, since your last commit, if you have edited 3 files, those 3 files will be listed when you run:
<pre>$&gt; gs
path/to/file1
path/to/file2
path/to/file3</pre>
It is useful to pipe <code>gs</code> to other commands, or use it in a command substitution another command.

Either way, here are a few different ways to use <code>gs</code>:
<pre># reopen all of the files you have been working on
$&gt; vim $(gs)

# check the syntax of all the modified ruby files
$&gt; gs '\.rb' | while read file; do ruby -c $file; done

# view the diff of a specific file
$&gt; git diff $(gs _form.html)

# re-run the tests that you worked on
$&gt; rspec $(gs spec)

# git checkout, aka revert, all of your modified models
$&gt; git checkout $(gs models)</pre>
Here is the code for gs:
<pre>gs () {
  # Author: Joshua Toyota (Unix Superhero)
  git status -s | sed "s/...//;s/.* -&gt; //" | grep "$1" | sort -u
}</pre>
<div>Here is what the usage/synopsis would look like:</div>
<pre>Usage: gs [search-pattern]

If search-pattern is not provided, list all of the changed files yet to be committed.

If search-pattern is provided, only the file names and paths that match the search-pattern will be returned.</pre>
-#
  <wp:post_id>6</wp:post_id>
  <wp:post_date>2012-10-04 17:52:26</wp:post_date>
  <wp:post_date_gmt>2012-10-04 17:52:26</wp:post_date_gmt>
  <wp:post_name>enhancing-git-status-with-gs</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_type>post</wp:post_type>
  <wp:post_password></wp:post_password>
  <TAGS>
  Bash
  bash tips
  bash tricks
  Git
  git status
  git tips
  git tricks
  shell script
  Uncategorized
  </TAGS>
  <link>http://unixsuperhero.com/2012/10/04/enhancing-git-status-with-gs/</link>
  <pubDate>Thu, 04 Oct 2012 17:52:26 +0000</pubDate>
  <guid isPermaLink="false">http://unixsuperhero.wordpress.com/?p=6</guid>
