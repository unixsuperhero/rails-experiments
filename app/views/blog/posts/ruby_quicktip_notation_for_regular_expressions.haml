= content_for :title
	Ruby Quicktip: % Notation for Regular Expressions
I recently ran into a situation where I was removing "http://" and "https://" from links.  If I used the classic "/" to delimit the regex, it looks like this:
<pre>/https?:\/\//i</pre>
Escaping the slashes just isn't cute.  Is it?  To avoid escaping the two slashes, I used a dot, like I mentioned in a <a href="http://unixsuperhero.wordpress.com/2012/10/06/regex-quicktip-1-using-dot-properly/">previous tip</a>:
<pre>/https?:../i</pre>
However, yesterday learned that you can escape a regex with %r{}, like so:
<pre>%r{https?://}i</pre>
The first method is accurate, but not clean.  The second method is clean, but not accurate.  But. the third method is both clean <strong>and</strong> accurate.
<pre>link.sub(/https?:\/\//i, '')    # 1st method
link.sub(/https?:../i, '')      # 2nd method
link.sub(%r{https?://}i, '')    # 3rd method</pre>
-#
  <wp:post_id>50</wp:post_id>
  <wp:post_date>2012-10-12 01:37:23</wp:post_date>
  <wp:post_date_gmt>2012-10-12 01:37:23</wp:post_date_gmt>
  <wp:post_name>ruby-quicktip-notation-for-regular-expressions</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_type>post</wp:post_type>
  <wp:post_password></wp:post_password>
  <TAGS>
  percent notation
  regex
  ruby
  Uncategorized
  </TAGS>
  <link>http://unixsuperhero.com/2012/10/12/ruby-quicktip-notation-for-regular-expressions/</link>
  <pubDate>Fri, 12 Oct 2012 01:37:23 +0000</pubDate>
  <guid isPermaLink="false">http://unixsuperhero.wordpress.com/?p=50</guid>
