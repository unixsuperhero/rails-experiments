<item>
  <title>So you want to be a web developer? : Intro</title>
  <link>http://unixsuperhero.com/2012/12/03/so-you-want-to-be-a-web-developer-intro/</link>
  <pubDate>Mon, 03 Dec 2012 03:55:54 +0000</pubDate>
  <guid isPermaLink="false">http://unixsuperhero.com/?p=107</guid>
  <content:encoded><![CDATA[<h2>READ FIRST:</h2>

So you want to be a Web Developer.  I hear this a lot.  When I hear it, I either want to laugh, or...  It seems as if most people are just trying to waste my time, sorry if I sound bitter.  Now, I am here writing this, because it solves 2 situations.
<ol>
<li>The person wasting my time, can read it (or not), then change their mind without any wasted effort on my part</li>
<li>Those who are serious will have a guide, written by me, and I only have to explain everything one time</li>
</ol>

<h2>Introduction</h2>

A Web Developer, eh?  Being a dev can be fun and rewarding.  Before you start learning, ask yourself a question.  What am I learning this for: a project, a hobby, a learning experience, a job/career, ...?  Your answer to this question changes how, what, and how much you learn.  I am writing this for someone who hopes to pursue a career and needs to know all of the skills necessary to first get hired and then excel.

Forewarning: modern web development requires understanding many different technologies, standards, and processes.

<h2>Pre-requisites</h2>

<h3>Basic computer stuff</h3>

Files, folder/directories, etc.  I hope I don't have to explain this one.

<h3>Knowing how the web works</h3>

It is not required to intimately know how the web works.  A mid-high level<sup>1</sup> understanding is more than sufficient.  It helps to understand a few concepts as well.  You should know what the following things are:
<ul>
<li>Web browser</li>
<li>Domain Name</li>
<li>ip address</li>
<li>Server (hardware)</li>
<li>Web server (software)</li>
<li>Database server (hardware)</li>
<li>Database (software)</li>
<li>HTML</li>
<li>CSS  (stylesheets)</li>
<li>CRUD (create read update delete)</li>
<li>REST (types of web requests, get, post...)</li>
</ul>
Including the differences between hardware servers and software servers.

You should also know how a single web request works.  From the point of the user typing in google.com, where does the request go, what is the response, how does the response translate into a webpage.

<sup>1</sup> High level vs. Low level - High level is a very basic understanding, without many details.  From a top-view, a high level is the farthest from the target.  Low level is a thorough understanding, with many details.  Knowing how things work at a low level, you understand all of the little parts that make it operate.


<h2>Learning Web Development</h2>
This section here will act somewhat like an outline or a table of contents.  It is mostly just a brainstorming session of me listing all the different aspects of my daily tasks.

<h3>Brainstorming</h3>
<a href="http://en.wikipedia.org/wiki/Revision_control">Revision Control (wikipedia)</a>
- git
basics/important fundamentals
- html/css
system/file management
- unix
- bash
- vim
basic programming
- generalize: variable and function calling
-- data is king
- i/o
- primitives
- operators
- variables
- conditionals
- loops
- functions
- oop
- libraries/extensions
- references/advanced
languages
- ruby
- js
frameworks
- rails
- jquery
- bootstrap
patterns/concepts
- mvc
- tdd
testing
- cucumber
- rspec
databases
- tables
- keys (prim/foreign)
- relationships
- sql
- mysql/postgresql
- data modeling
- ORMs]]></content:encoded>
  <wp:post_id>107</wp:post_id>
  <wp:post_date>2012-12-03 03:55:54</wp:post_date>
  <wp:post_date_gmt>2012-12-03 03:55:54</wp:post_date_gmt>
  <wp:post_name>so-you-want-to-be-a-web-developer-intro</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_type>post</wp:post_type>
  <wp:post_password>toyota</wp:post_password>
  <TAGS>
  Uncategorized
  </TAGS>
</item>
